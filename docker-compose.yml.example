# 智能选股系统 Docker Compose 配置模板
# 复制此文件为 docker-compose.yml 并根据实际环境修改配置

version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: stock_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: stock
      MYSQL_USER: stock_user
      MYSQL_PASSWORD: stock_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - stock_network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: stock_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - stock_network

  # 智能选股系统 API 服务
  stock_api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: stock_api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - STOCK_DATABASE_HOST=mysql
      - STOCK_DATABASE_PORT=3306
      - STOCK_DATABASE_NAME=stock
      - STOCK_DATABASE_USER=stock_user
      - STOCK_DATABASE_PASSWORD=stock_password
      - STOCK_REDIS_HOST=redis
      - STOCK_REDIS_PORT=6379
      - STOCK_APP_ENV=production
      - STOCK_APP_DEBUG=false
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - stock_network

  # 智能选股系统 Web 服务
  stock_web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web
    container_name: stock_web
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - STOCK_DATABASE_HOST=mysql
      - STOCK_DATABASE_PORT=3306
      - STOCK_DATABASE_NAME=stock
      - STOCK_DATABASE_USER=stock_user
      - STOCK_DATABASE_PASSWORD=stock_password
      - STOCK_REDIS_HOST=redis
      - STOCK_REDIS_PORT=6379
      - STOCK_APP_ENV=production
      - STOCK_APP_DEBUG=false
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
      - ./web:/app/web
    depends_on:
      - mysql
      - redis
    networks:
      - stock_network

  # Prometheus 监控（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: stock_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - stock_network

  # Grafana 可视化（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: stock_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - stock_network

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  stock_network:
    driver: bridge